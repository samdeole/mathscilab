{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\src\\\\pages\\\\Payment\\\\StripeWrapper.jsx\",\n  _s = $RefreshSig$();\n// StripeWrapper.jsx\nimport React, { useEffect, useState } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport BookingPage from '../Booking';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\nexport default function StripeWrapper() {\n  _s();\n  const [clientSecret, setClientSecret] = useState(null);\n  const [amount, setAmount] = useState(0); // Optional: to dynamically send amount later\n\n  useEffect(() => {\n    // Dummy amount (replace with dynamic one from booking details if needed)\n    const selectedAmount = 10; // in cents, $\n    setAmount(selectedAmount);\n    fetch('http://localhost:5000/api/create-payment-intent', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: selectedAmount\n      })\n    }).then(res => res.json()).then(data => setClientSecret(data.clientSecret)).catch(err => console.error('Failed to create payment intent:', err));\n  }, []);\n  const appearance = {\n    theme: 'stripe'\n  };\n  const options = {\n    clientSecret,\n    appearance\n  };\n  if (!clientSecret) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading payment...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 29\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Elements, {\n    stripe: stripePromise,\n    options: options,\n    children: /*#__PURE__*/_jsxDEV(BookingPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(StripeWrapper, \"PYLJ0Ko7VwezwxhIkvgA7ySNjbc=\");\n_c = StripeWrapper;\nvar _c;\n$RefreshReg$(_c, \"StripeWrapper\");","map":{"version":3,"names":["React","useEffect","useState","loadStripe","Elements","BookingPage","jsxDEV","_jsxDEV","stripePromise","import","meta","env","VITE_STRIPE_PUBLIC_KEY","StripeWrapper","_s","clientSecret","setClientSecret","amount","setAmount","selectedAmount","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","err","console","error","appearance","theme","options","children","fileName","_jsxFileName","lineNumber","columnNumber","stripe","_c","$RefreshReg$"],"sources":["C:/Projects/src/pages/Payment/StripeWrapper.jsx"],"sourcesContent":["// StripeWrapper.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { Elements } from '@stripe/react-stripe-js';\r\nimport BookingPage from '../Booking';\r\n\r\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\r\n\r\nexport default function StripeWrapper() {\r\n  const [clientSecret, setClientSecret] = useState(null);\r\n  const [amount, setAmount] = useState(0); // Optional: to dynamically send amount later\r\n\r\n  useEffect(() => {\r\n    // Dummy amount (replace with dynamic one from booking details if needed)\r\n    const selectedAmount = 10; // in cents, $\r\n    setAmount(selectedAmount);\r\n\r\n    fetch('http://localhost:5000/api/create-payment-intent', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ amount: selectedAmount }),\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => setClientSecret(data.clientSecret))\r\n      .catch(err => console.error('Failed to create payment intent:', err));\r\n  }, []);\r\n\r\n  const appearance = { theme: 'stripe' };\r\n  const options = { clientSecret, appearance };\r\n\r\n  if (!clientSecret) return <div>Loading payment...</div>;\r\n\r\n  return (\r\n    <Elements stripe={stripePromise} options={options}>\r\n      <BookingPage />\r\n    </Elements>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,OAAOC,WAAW,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,aAAa,GAAGL,UAAU,CAACM,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,sBAAsB,CAAC;AAExE,eAAe,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACtC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACe,MAAM,EAAEC,SAAS,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEzCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMkB,cAAc,GAAG,EAAE,CAAC,CAAC;IAC3BD,SAAS,CAACC,cAAc,CAAC;IAEzBC,KAAK,CAAC,iDAAiD,EAAE;MACvDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,MAAM,EAAEE;MAAe,CAAC;IACjD,CAAC,CAAC,CACCO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIb,eAAe,CAACa,IAAI,CAACd,YAAY,CAAC,CAAC,CAChDe,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,GAAG,CAAC,CAAC;EACzE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,UAAU,GAAG;IAAEC,KAAK,EAAE;EAAS,CAAC;EACtC,MAAMC,OAAO,GAAG;IAAErB,YAAY;IAAEmB;EAAW,CAAC;EAE5C,IAAI,CAACnB,YAAY,EAAE,oBAAOR,OAAA;IAAA8B,QAAA,EAAK;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAEvD,oBACElC,OAAA,CAACH,QAAQ;IAACsC,MAAM,EAAElC,aAAc;IAAC4B,OAAO,EAAEA,OAAQ;IAAAC,QAAA,eAChD9B,OAAA,CAACF,WAAW;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEf;AAAC3B,EAAA,CA7BuBD,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}